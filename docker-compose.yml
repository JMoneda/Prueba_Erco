version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: erco-postgres
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      TZ: ${TZ:-America/Bogota}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - erco-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - APP_VERSION=${APP_VERSION}
    container_name: erco-backend
    env_file:
      - .env
    environment:
      DB_HOST: postgres  # Usar nombre del servicio Docker
      PYTHONUNBUFFERED: 1
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - erco-network
    volumes:
      - ./backend/app:/app/app
      - ./logs:/app/logs
    command: >
      sh -c "
        echo 'Esperando a que la base de datos esté lista...' &&
        sleep 5 &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "
    restart: unless-stopped

  # Frontend (servidor web)
  frontend:
    image: nginx:alpine
    container_name: erco-frontend
    environment:
      - TZ=${TZ:-America/Bogota}
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "${FRONTEND_PORT:-80}:80"
    networks:
      - erco-network
    depends_on:
      - backend
    restart: unless-stopped

  # Redis (opcional, para caché)
  redis:
    image: redis:7-alpine
    container_name: erco-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - erco-network
    restart: unless-stopped
    profiles:
      - cache  # Solo se inicia si se especifica el profile

volumes:
  postgres_data:
    name: erco_postgres_data

networks:
  erco-network:
    driver: bridge
    name: erco_network